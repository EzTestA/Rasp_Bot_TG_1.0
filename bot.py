#!/usr/bin/env python3
import json
import logging
import hashlib
import sys
import os
import asyncio
import glob
from datetime import datetime, timedelta
import psutil
from telegram import Update, ReplyKeyboardMarkup, Bot
from telegram.error import InvalidToken, RetryAfter
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackContext
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
LOG_DIR = 'logs'
SCHEDULES_DIR = 'schedules'
USER_DATA_FILE = 'users.json'
CONFIG_FILE = 'config.json'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(SCHEDULES_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = os.path.join(LOG_DIR, 'bot.log')
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8', mode='a'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)
logger.propagate = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
application = None
shutdown_event = asyncio.Event()
user_requests = {}

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def save_schedule(update_time, schedule):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Ö–µ—à–µ–º –≤ –ø–∞–ø–∫—É schedules"""
    try:
        schedule_hash = hashlib.md5(
            json.dumps(schedule, sort_keys=True).encode('utf-8')
        ).hexdigest()
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_schedule.json"
        filepath = os.path.join(SCHEDULES_DIR, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump({
                'update_time': update_time,
                'schedule': schedule,
                'hash': schedule_hash
            }, f, ensure_ascii=False, indent=4)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (>500)
        schedule_files = sorted(glob.glob(os.path.join(SCHEDULES_DIR, '*.json')))
        if len(schedule_files) > 500:
            for file in schedule_files[:-500]:
                try:
                    os.remove(file)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        
        return schedule_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None

def get_latest_schedule():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        files = sorted(glob.glob(os.path.join(SCHEDULES_DIR, '*.json')), reverse=True)
        if files:
            with open(files[0], 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    return None

def validate_user_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not os.path.exists(USER_DATA_FILE):
            return

        with open(USER_DATA_FILE, 'r+', encoding='utf-8') as f:
            users = json.load(f)
            modified = False
            
            for user_id, user_data in users.items():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è chat_id
                if user_data.get('chat_id') in ['null', 'None', None]:
                    users[user_id]['chat_id'] = None
                    modified = True
                elif isinstance(user_data.get('chat_id'), str):
                    try:
                        users[user_id]['chat_id'] = int(user_data['chat_id'])
                        modified = True
                    except ValueError:
                        users[user_id]['chat_id'] = None
                        modified = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = {
                    'username': '',
                    'first_seen': datetime.now().isoformat(),
                    'last_seen': datetime.now().isoformat(),
                    'notifications': False,
                    'actions': [],
                    'banned': False,
                    'ban_reason': None
                }
                
                for field, default in required_fields.items():
                    if field not in user_data:
                        users[user_id][field] = default
                        modified = True

            if modified:
                f.seek(0)
                json.dump(users, f, ensure_ascii=False, indent=4)
                f.truncate()
                logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ user.json: {e}")

def log_user_activity(user_id, username, action):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = {}
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                users = json.load(f)
        
        user_key = str(user_id)
        if user_key not in users:
            users[user_key] = {
                'username': username,
                'first_seen': datetime.now().isoformat(),
                'last_seen': datetime.now().isoformat(),
                'notifications': False,
                'actions': [],
                'chat_id': None,
                'banned': False,
                'ban_reason': None
            }
        
        users[user_key]['last_seen'] = datetime.now().isoformat()
        users[user_key]['actions'].append({
            'time': datetime.now().isoformat(),
            'action': action
        })
        
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=4)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def is_user_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            users = json.load(f)
            return users.get(str(user_id), {}).get('banned', False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False


def update_user_data(user_id, data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        users = {}
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                users = json.load(f)
        
        user_key = str(user_id)
        if user_key not in users:
            users[user_key] = {
                'username': str(user_id),
                'first_seen': datetime.now().isoformat(),
                'last_seen': datetime.now().isoformat(),
                'notifications': False,
                'actions': [],
                'chat_id': None,
                'banned': False,
                'ban_reason': None
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        users[user_key].update(data)
        
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=4)
            
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def send_ban_notification(user_id, reason, is_banned=True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            users = json.load(f)
            user = users.get(str(user_id))
            if not user or not user.get('chat_id'):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return

        config = load_config()
        if not config or not config.get('token'):
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
            
        bot = Bot(token=config['token'])
        
        try:
            if is_banned:
                message = f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            else:
                message = "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –±–æ—Ç–µ —Å–Ω—è—Ç–∞!"

            await bot.send_message(
                chat_id=user['chat_id'],
                text=message
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {'–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ' if is_banned else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if "bot was blocked" in str(e).lower():
                # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–≥–æ
                update_user_data(int(user_id), {'notifications': False})
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª—é—á–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_ban_notification: {e}")

def anti_spam(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    async def wrapper(update, context):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if is_user_banned(user_id):
            await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
            return
            
        now = datetime.now()
        
        if user_id not in user_requests:
            user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        user_requests[user_id] = [
            t for t in user_requests[user_id] 
            if now - t < timedelta(seconds=10)
        ]
        
        if len(user_requests[user_id]) >= 15:  # –õ–∏–º–∏—Ç 15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 10 —Å–µ–∫—É–Ω–¥
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
            return
        
        user_requests[user_id].append(now)
        return await func(update, context)
    return wrapper

def is_user_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            users = json.load(f)
            return users.get(str(user_id), {}).get('banned', False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False

@anti_spam
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    chat_id = update.effective_chat.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_data(user_id, {
        'username': username,
        'chat_id': chat_id,
        'last_seen': datetime.now().isoformat()
    })
    
    if user_id not in user_states:
        user_states[user_id] = {"notifications_active": False}
    
    log_user_activity(user_id, username, "start")
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard(user_states[user_id]["notifications_active"])
    )

def create_keyboard(notifications_active):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = [
        ["üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
        ["‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_active else "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
        ["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

@anti_spam
async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    log_user_activity(user_id, username, "schedule_request")
    
    data = get_latest_schedule()
    if not data:
        await update.message.reply_text("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return
    
    response = f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data['update_time']}\n\n"
    for day, pairs in data["schedule"].items():
        response += f"üìÖ {day}:\n"
        for pair in pairs:
            if pair.get("Name") and pair["Auditory"] != "–ù–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏":
                subgroup = f" (–ü–æ–¥–≥—Ä—É–ø–ø–∞ {pair['Subgroup']})" if pair.get("Subgroup") == "–î–∞" else ""
                response += f"üî¢ {pair['N_par']}: {pair['Name']} - {pair['Auditory']} (üë®‚Äçüè´ {pair['Teacher']}){subgroup}\n"
            else:
                response += f"üî¢ –ù–µ—Ç –ø–∞—Ä—ã: ‚ùå\n"
        response += "\n"
    
    try:
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@anti_spam
async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    
    if user_id not in user_states:
        user_states[user_id] = {"notifications_active": False}
    
    user_states[user_id]["notifications_active"] = not user_states[user_id]["notifications_active"]
    status = user_states[user_id]["notifications_active"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    update_user_data(user_id, {'notifications': status})
    log_user_activity(user_id, username, f"notifications_{'on' if status else 'off'}")
    
    await update.message.reply_text(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'‚úÖ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' if status else '‚ùå –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã'}",
        reply_markup=create_keyboard(status)
    )

@anti_spam
async def bot_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    log_user_activity(user_id, username, "bot_info")
    
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"
        "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/check - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/notif - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "üîî –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!"
    )

@anti_spam
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    if user_id not in user_states:
        user_states[user_id] = {"notifications_active": False}

    text = update.message.text
    if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ":
        await bot_info(update, context)
    elif text == "üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await show_schedule(update, context)
    elif text in ["‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]:
        await toggle_notifications(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            reply_markup=create_keyboard(user_states[user_id]["notifications_active"])
        )

async def send_notifications(context: CallbackContext, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        if not os.path.exists(USER_DATA_FILE):
            return

        with open(USER_DATA_FILE, 'r') as f:
            users = json.load(f)
        
        for user_id_str, user_data in users.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user_data.get('banned', False):
                continue
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å chat_id –∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if user_data.get('chat_id') and user_data.get('notifications', False):
                try:
                    await context.bot.send_message(
                        chat_id=user_data['chat_id'],
                        text=message
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    if "bot was blocked" in str(e).lower():
                        update_user_data(int(user_id_str), {'notifications': False})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def check_schedule_changes(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    try:
        old_data = get_latest_schedule()
        old_hash = old_data.get('hash') if old_data else None
        
        from parser import get_schedule
        update_time, new_schedule = get_schedule()
        
        if new_schedule:
            new_hash = save_schedule(update_time, new_schedule)
            
            if old_hash != new_hash:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
                await send_notifications(
                    context,
                    f"üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                )
    except ImportError:
        logger.error("–ú–æ–¥—É–ª—å parser –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

async def shutdown_application():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    global application
    if application:
        try:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            if application.updater:
                await application.updater.stop()
            await application.stop()
            await application.shutdown()
            logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        finally:
            application = None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    validate_user_data()
    
    try:
        config = load_config()
        if not config or not config.get('token'):
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
            
        application = ApplicationBuilder().token(config["token"]).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("check", show_schedule))
        application.add_handler(CommandHandler("info", bot_info))
        application.add_handler(CommandHandler("notif", toggle_notifications))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        application.job_queue.run_repeating(
            check_schedule_changes, 
            interval=1800, 
            first=10
        )
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await shutdown_event.wait()
        
    except InvalidToken:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await shutdown_application()

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    shutdown_event.set()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    import signal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = proc.info['cmdline'] or []
            if 'python' in proc.info['name'].lower() and 'bot.py' in ' '.join(cmdline):
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False