#!/usr/bin/env python3
from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from telegram import Bot
import json
import os
import signal
import subprocess
import sys
import psutil
import time
import glob
import threading
import requests
from datetime import datetime
from urllib.parse import quote_plus
import asyncio
from bot import send_ban_notification as send_bot_notification

app = Flask(__name__, template_folder='templates')
app.secret_key = 'your-secret-key-here'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π
USERS_DIR = 'users'
LOG_DIR = 'logs'
SCHEDULES_DIR = 'schedules'
CONFIG_FILE = 'config.json'

def init_data_structure():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    os.makedirs(USERS_DIR, exist_ok=True)
    os.makedirs(LOG_DIR, exist_ok=True)
    os.makedirs(SCHEDULES_DIR, exist_ok=True)
    
    if not os.path.exists(CONFIG_FILE):
        default_config = {
            'token': '',
            'site_url': 'SITE',
            'admin_login': 'admin',
            'admin_password': 'admin',
            'check_interval': 1800
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(default_config, f, indent=4)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {
            'token': '',
            'site_url': 'SITE',
            'admin_login': 'admin',
            'admin_password': 'admin',
            'check_interval': 1800
        }

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return False

def get_bot_process():
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞"""
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = proc.info['cmdline'] or []
            if 'python' in proc.info['name'].lower() and 'bot.py' in ' '.join(cmdline):
                return proc
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return None

def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    try:
        bot_process = get_bot_process()
        if not bot_process:
            return True
            
        if sys.platform == 'win32':
            subprocess.run(['taskkill', '/F', '/PID', str(bot_process.info['pid'])], 
                          check=True, creationflags=subprocess.CREATE_NO_WINDOW)
        else:
            os.kill(bot_process.info['pid'], signal.SIGKILL)
        
        time.sleep(2)
        return get_bot_process() is None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        return False

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        if sys.platform == 'win32':
            creation_flags = subprocess.CREATE_NEW_PROCESS_GROUP | subprocess.CREATE_NO_WINDOW
        else:
            creation_flags = 0
            
        subprocess.Popen(
            [sys.executable, 'bot.py'],
            creationflags=creation_flags,
            start_new_session=True
        )
        time.sleep(2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    stop_bot()
    time.sleep(2)
    return start_bot()

def bot_status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return "running" if get_bot_process() else "stopped"

def load_user_data(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_file = os.path.join(USERS_DIR, f"{user_id}.json")
    if os.path.exists(user_file):
        with open(user_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def save_user_data(user_id, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_file = os.path.join(USERS_DIR, f"{user_id}.json")
    with open(user_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def send_ban_notification(user_id, reason, is_banned=True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    try:
        user_data = load_user_data(user_id)
        if not user_data:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if not user_data.get('chat_id'):
            print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id.")
            return

        config = load_config()
        if not config or not config.get('token'):
            print("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        token = config['token']
        chat_id = user_data['chat_id']
        
        if is_banned:
            message = f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        else:
            message = "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –±–æ—Ç–µ —Å–Ω—è—Ç–∞!"

        url = f"https://api.telegram.org/bot{token}/sendMessage"
        response = requests.post(
            url,
            json={
                'chat_id': chat_id,
                'text': message
            }
        )
        
        if response.status_code == 200:
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        else:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.json()}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@app.route('/')
@app.route('/admin')
def admin():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    config = load_config()
    return render_template('index.html', config=config, bot_status=bot_status())

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        config = load_config()
        
        if username == config['admin_login'] and password == config['admin_password']:
            session['logged_in'] = True
            return redirect(url_for('admin'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'danger')
    return render_template('login.html')

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.pop('logged_in', None)
    return redirect(url_for('login'))

@app.route('/shutdown', methods=['POST'])
def shutdown():
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        if not stop_bot():
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞'}), 500
        
        def delayed_shutdown():
            time.sleep(1)
            os.kill(os.getpid(), signal.SIGTERM)
        
        threading.Thread(target=delayed_shutdown, daemon=True).start()
        
        return jsonify({'message': '–°–∏—Å—Ç–µ–º–∞ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...'})
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'}), 500

@app.route('/update_config', methods=['POST'])
def update_config():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    
    try:
        try:
            check_interval = int(request.form.get('check_interval', 1800))
            if check_interval < 300:
                flash('–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)', 'warning')
                check_interval = 300
            elif check_interval > 86400:
                flash('–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 86400 —Å–µ–∫—É–Ω–¥ (24 —á–∞—Å–∞)', 'warning')
                check_interval = 86400
        except ValueError:
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1800 —Å–µ–∫)', 'warning')
            check_interval = 1800

        new_config = {
            'token': request.form.get('token', '').strip(),
            'site_url': request.form.get('site_url', '').strip(),
            'admin_login': request.form.get('admin_login', '').strip(),
            'admin_password': request.form.get('admin_password', '').strip(),
            'check_interval': check_interval
        }

        if not all([new_config['site_url'], new_config['admin_login'], new_config['admin_password']]):
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'danger')
            return redirect(url_for('admin'))

        old_config = load_config()
        token_changed = old_config.get('token') != new_config['token']

        if save_config(new_config):
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success')
            
            if token_changed or (old_config.get('check_interval') != check_interval):
                if restart_bot():
                    flash('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', 'success')
                else:
                    flash('–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω', 'warning')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'danger')

    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
        flash(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}', 'danger')

    return redirect(url_for('admin'))

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        if not stop_bot():
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º")
            return False

        time.sleep(2)

        config = load_config()
        check_interval = config.get('check_interval', 1800)

        if not config.get('token'):
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return False

        if sys.platform == 'win32':
            creation_flags = subprocess.CREATE_NEW_PROCESS_GROUP | subprocess.CREATE_NO_WINDOW
        else:
            creation_flags = 0

        process = subprocess.Popen(
            [sys.executable, 'bot.py'],
            creationflags=creation_flags,
            start_new_session=True
        )

        time.sleep(3)
        if process.poll() is not None:
            print(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
            return False

        print(f"üîÑ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫)")
        return True

    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        return False

@app.route('/start_bot')
def start_bot_route():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not session.get('logged_in'):
        return jsonify({'message': 'Unauthorized'}), 401
    
    if start_bot():
        return jsonify({'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'})
    return jsonify({'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞'}), 500

@app.route('/stop_bot')
def stop_bot_route():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if not session.get('logged_in'):
        return jsonify({'message': 'Unauthorized'}), 401
    
    if stop_bot():
        return jsonify({'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
    return jsonify({'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞'}), 500

@app.route('/get_users')
def get_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        users = {}
        for filename in os.listdir(USERS_DIR):
            if filename.endswith('.json'):
                user_id = filename[:-5]
                with open(os.path.join(USERS_DIR, filename), 'r', encoding='utf-8') as f:
                    user_data = json.load(f)
                    if 'chat_id' not in user_data:
                        user_data['chat_id'] = None
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
                    user_data['total_actions'] = len(user_data.get('actions', []))
                    users[user_id] = user_data
        return jsonify(users)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/get_user_actions/<user_id>')
def get_user_actions(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        user_data = load_user_data(user_id)
        if not user_data:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'username': user_data.get('username'),
            'total_actions': len(user_data.get('actions', [])),
            'actions': user_data.get('actions', [])
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/ban_user', methods=['POST'])
def ban_user():
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401

    user_id = request.form.get('user_id')
    reason = request.form.get('reason', '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª')

    try:
        user_data = load_user_data(user_id)
        if not user_data:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        user_data['banned'] = True
        user_data['ban_reason'] = reason
        save_user_data(user_id, user_data)

        send_ban_notification(user_id, reason, is_banned=True)
        return jsonify({'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/unban_user', methods=['POST'])
def unban_user():
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401

    user_id = request.form.get('user_id')

    try:
        user_data = load_user_data(user_id)
        if not user_data:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        user_data['banned'] = False
        if 'ban_reason' in user_data:
            del user_data['ban_reason']
        save_user_data(user_id, user_data)

        send_ban_notification(user_id, "", is_banned=False)
        return jsonify({'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/send_message', methods=['POST'])
def send_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401

    user_id = request.form.get('user_id', '').strip()
    message = request.form.get('message', '').strip()

    if not message:
        return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

    try:
        recipients = []
        if user_id:
            user_data = load_user_data(user_id)
            if user_data and user_data.get('chat_id'):
                recipients.append(user_data['chat_id'])
            else:
                return jsonify({'error': '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç chat_id'}), 400
        else:
            for filename in os.listdir(USERS_DIR):
                if filename.endswith('.json'):
                    with open(os.path.join(USERS_DIR, filename), 'r', encoding='utf-8') as f:
                        user_data = json.load(f)
                        if user_data.get('chat_id') and not user_data.get('banned', False):
                            recipients.append(user_data['chat_id'])

        if not recipients:
            return jsonify({'error': '–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'}), 400

        token = load_config()['token']
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        success, failed = 0, 0

        for chat_id in recipients:
            try:
                response = requests.post(
                    url,
                    json={
                        'chat_id': chat_id,
                        'text': message
                    },
                    headers={'Content-Type': 'application/json; charset=utf-8'}
                )
                if response.json().get('ok'):
                    success += 1
                else:
                    failed += 1
                    print(f"–û—à–∏–±–∫–∞ Telegram API: {response.json()}")
            except Exception as e:
                failed += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

        return jsonify({
            'message': f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}, –û—à–∏–±–æ–∫: {failed}'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/get_logs')
def get_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        log_file = os.path.join(LOG_DIR, 'bot.log')
        with open(log_file, 'r', encoding='utf-8') as f:
            return jsonify({'logs': f.read()})
    except:
        return jsonify({'error': 'Logs not found'}), 404

@app.route('/clear_logs')
def clear_logs():
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        log_file = os.path.join(LOG_DIR, 'bot.log')
        open(log_file, 'w').close()
        return jsonify({'message': '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã'})
    except:
        return jsonify({'error': '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤'}), 500

@app.route('/get_schedules')
def get_schedules():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        files = sorted(glob.glob(os.path.join(SCHEDULES_DIR, '*.json')), reverse=True)[:500]
        schedules = []
        for file in files:
            with open(file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                schedules.append({
                    'filename': os.path.basename(file),
                    'update_time': data.get('update_time', ''),
                    'hash': data.get('hash', '')
                })
        return jsonify(schedules)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/get_schedule/<filename>')
def get_schedule(filename):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        filepath = os.path.join(SCHEDULES_DIR, filename)
        with open(filepath, 'r', encoding='utf-8') as f:
            return jsonify(json.load(f))
    except:
        return jsonify({'error': 'Schedule not found'}), 404

@app.route('/get_formatted_schedule/<filename>')
def get_formatted_schedule(filename):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        filepath = os.path.join(SCHEDULES_DIR, filename)
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        html = f"""
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç {data.get('update_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</h5>
            </div>
            <div class="card-body">
        """
        
        for date, day_data in data['schedule'].items():
            day_of_week = day_data.get("day_of_week", "")
            html += f"""
            <div class="day-schedule mb-4">
                <h6 class="day-title text-primary">{date} ({day_of_week})</h6>
                <table class="table table-bordered table-sm">
                    <thead class="thead-dark">
                        <tr>
                            <th>‚Ññ</th>
                            <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                            <th>–ê—É–¥–∏—Ç–æ—Ä–∏—è</th>
                            <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                            <th>–ü–æ–¥–≥—Ä—É–ø–ø–∞</th>
                        </tr>
                    </thead>
                    <tbody>
            """
            
            for lesson in day_data["lessons"]:
                html += f"""
                <tr>
                    <td>{lesson.get('lesson_number', '')}</td>
                    <td>{lesson.get('name', '')}</td>
                    <td>{lesson.get('auditorium', '')}</td>
                    <td>{lesson.get('teacher', '')}</td>
                    <td>{'–î–∞' if lesson.get('subgroup') else '–ù–µ—Ç'}</td>
                </tr>
                """
            
            html += """
                    </tbody>
                </table>
            </div>
            """
        
        html += """
            </div>
        </div>
        """
        
        return jsonify({'html': html})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/logs')
def logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤"""
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return render_template('logs.html')

@app.route('/users')
def users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return render_template('users.html')

@app.route('/schedule')
def schedule():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return render_template('schedule.html')

if __name__ == '__main__':
    init_data_structure()
    config = load_config()
    if config and config.get('token'):
        start_bot()
    app.run(host='0.0.0.0', port=5000, debug=False)